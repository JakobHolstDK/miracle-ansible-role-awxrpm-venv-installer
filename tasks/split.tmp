- name: install awx-from-source 
  action: template src=dumpall.j2 dest=/tmp/ansible_dump.all

- name: run awx setup install
  ansible.builtin.command: /var/awx/venv/bin/python setup.py install
  become: yes
  args:
    chdir:  /tmp/awx

- name: django-debug-toolbar 
  ansible.builtin.command: /var/awx/venv/bin/pip install django-debug-toolbar
  become: yes
  args:
    chdir:  /tmp/awx

- name: django-rest-swagger
  ansible.builtin.command: /var/awx/venv/bin/pip install django-rest-swagger
  become: yes
  args:
    chdir:  /tmp/awx

- name: Creates tower
  file:
    path: /etc/tower/conf.d
    state: directory
    owner: awx
    group: awx
    mode: 0770
    recurse: yes
  become: True

- name: Ensure awx is in the nginx group
  user:
    append: yes
    name: awx
    groups: nginx
  become: True

- name: Configure the Tower socket directory.
  file: path=/var/run/tower state=directory owner=nginx group=nginx mode=2775
  become: True

- name: Configure the Tower socket directory for tmpfiles.d
  template:
    src: tower.conf.j2
    dest: /etc/tmpfiles.d/tower.conf
    force: yes
    mode: '0640'
    owner: root
    group: root
  become: True

- name: Configure the awx settings file
  template:
    src: settings.py.j2
    dest: /etc/tower/settings.py
    force: yes
    mode: '0640'
    owner: awx
    group: awx
  become: True


- name: Configure the Tower system user's home directory.
  file: path=/var/lib/awx state=directory owner=awx group=awx mode=0755
  become: True

- name: Configure the Tower system user's .ssh directory.
  file: path=/var/lib/awx/.ssh state=directory owner=awx group=awx mode=0700
  become: True

- name: Configure the Tower projects directory.
  file: path=/var/lib/awx/projects state=directory owner=awx group=awx mode=0750
  become: True

- name: Configure the Tower job output directory.
  file: path=/var/lib/awx/job_status state=directory owner=awx group=awx mode=0750
  become: True

- name: Configure the Tower static directory.
  file: path=/var/lib/awx/public/static state=directory owner=root group=awx mode=0755 recurse=yes
  become: True

- name: Add Towers `conf.d` directory.
  file: path=/etc/tower/conf.d state=directory owner=root group=awx mode=0750
  become: True

- name: configure tower log directory
  file: path=/var/log/tower state=directory owner=awx group=awx mode=0750
  become: True

- name: Update awx_supervisord logrotate config file
  copy:
    src: logrotate_awx_supervisord
    dest: '/etc/logrotate.d/awx_supervisord'
    owner: root
    group: root
    mode: '0644'
  become: True

- name: Update hourly cron logrotate invocation
  copy:
    src: logrotate_cron.hourly
    dest: '/etc/cron.hourly/logrotate'
    owner: root
    group: root
    mode: '0744'
  become: True

# Update service configuration information for the ansible-tower-service script
- name: Update ansible-tower-service configuration
  template:
    src: ansible-tower.sysconfig.j2
    dest: '/etc/sysconfig/ansible-tower'
    owner: root
    group: root
    mode: '0644'
  become: True

# When running with an external database, we need to remove 'postgresql' from
# the list of tower managed services.
- name: Update ansible-tower systemd configuration
  template:
    src: ansible-tower.service.j2
    dest: '/lib/systemd/system/ansible-tower.service'
    owner: root
    group: root
    mode: '0644'
  become: True

- name: Update dependent service configuration
  file:
    path: "/etc/systemd/system/{{ item }}.service.d"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - "nginx"
    - "supervisord"
    - "{{ awx_install_redis_init_name }}"
    - "{{ awx_install_pg_init_name | default(omit) }}"
  become: True

- name: Update dependent service configuration
  copy:
    src: "{{ lookup('first_found', override) }}"
    dest: "/etc/systemd/system/{{ item }}.service.d/override.conf"
    mode: 0644
    owner: root
    group: root
  vars:
    override:
      - "files/override-{{ item }}.conf"
      - "files/override.conf"
  loop:
    - "nginx"
    - "supervisord"
    - "{{ awx_install_redis_init_name }}"
    - "{{ awx_install_pg_init_name | default(omit) }}"
  become: True

- name: Reload systemd configuration
  command: systemctl daemon-reload
  become: True

- name: Enable the ansible-tower service
  service:
    name: ansible-tower
    enabled: true
  become: True

- name: Check if this is a fresh installation
  stat:
    path: /var/lib/awx/.tower_version
  register: previous_install_status
  become: True

  #- name: Get tower db settings
  #shell: "awx-manage print_settings | grep '^DATABASES'"
  #become_user: awx
  #become: True
  #register: results
  #changed_when: False
  #failed_when: false
  #no_log: True
  #become: True
  #
  #- name: Generate broadcast websocket secret
  #set_fact:
  #  broadcast_websocket_secret: "{{ lookup('password', '/dev/null length=128') }}"
  #run_once: true
  #no_log: true
  #become: True
  #
  #- #name: Stop supervisor
  #service:
  #  name: 'supervisord'
  #  state: stopped
  #become: True
  #
  #- #name: Wait for supervisor to stop.
  #  stat:
  #    path: '/var/run/supervisor/supervisor.sock'
  #  register: result
  #  until: not result.stat.exists
  #  retries: 10
  #  delay: 2
  #  become: True
  #
  #- name: Migrate the Tower database schema (may take awhile when upgrading).
  #  command: awx-manage migrate --noinput
  #  become_user: awx
  # become: True
  #  register: tower_migrate
  # changed_when: "tower_migrate.stdout is defined and 'No migrations to apply' not in tower_migrate.stdout"
  # become: True

- name: Checking for RBAC migration log
  stat: path=/tmp/tower_rbac_migrations.log
  register: rbac_log
  become: True

- name: Moving RBAC migration log
  command: mv /tmp/tower_rbac_migrations.log /var/log/tower
  when: rbac_log.stat.exists
  become: True

- name: get the tower version
  shell: awx-manage version
  become_user: awx
  become: True
  register: tower_version
  become: True

- name: store the tower version
  copy:
    dest: '/var/lib/awx/.tower_version'
    owner: root
    group: root
    mode: 0644
    content: '{{ tower_version.stdout }}'
  become_user: root
  become: True

- name: Get configuration files to set permissions on
  shell: ls /etc/tower/conf.d/*.py
  register: configuration_files
  changed_when: false
  become: True

- name: Check for Tower Super users
  shell: echo "from django.contrib.auth.models import User; nsu = User.objects.filter(is_superuser=True).count(); exit(0 if nsu > 0 else 1)" | awx-manage shell
  register: super_check
  become_user: awx
  become: True
  ignore_errors: yes
  changed_when: super_check.rc > 0

- name: create django super user if it does not exist
  shell: awx-manage createsuperuser --username={{ admin_username | quote }} --email={{ admin_email | quote }} --noinput
  register: result
  changed_when: "'That username is already taken' not in result.stderr"
  failed_when: "'That username is already taken' not in result.stderr and 'Superuser created successfully' not in result.stdout"
  become_user: awx
  become: True
  no_log: True

- name: update django super user password
  shell: awx-manage update_password --username='{{ admin_username }}' --password='{{ awx_install_admin_password }}'
  become_user: awx
  become: True
  no_log: True
  register: result
  changed_when: "'Password updated' in result.stdout"

- name: Collect static files for Tower.
  shell: umask 022 && awx-manage collectstatic --noinput --clear -v0
  become_user: root
  become: True
  # When using --clear, this command will *always* result in a change
  # register: awx_collectstatic
  # changed_when: "not awx_collectstatic.stdout_lines[-1].startswith('0 static files')"

- name: Fixup tower log directory permissions post-migration
  file:
    path: '/var/log/tower'
    state: 'directory'
    owner: awx
    group: awx
    recurse: true
    mode: 'u=rwX,g=rX,o-rwx'
  become: True

- name: Add ansible-runner cgroup config
  blockinfile:
    path: /etc/cgconfig.conf
    owner: root
    group: root
    mode: 0644
    create: yes
    insertafter: EOF
    marker: "# <!-- {mark} ansible-runner cgroup -->"
    block: |
      group ansible-runner {
        perm {
          admin {
            uid = awx;
            gid = awx;
          }

          task {
            uid = awx;
            gid = awx;
          }
        }

        cpuacct { }
        memory { }
        pids { }
      }
  become: true

- name: Enable, start cgconfig service
  service:
    name: cgconfig
    state: restarted
    enabled: true
  become: true

- name: Copy Candlepin RHSM Certificate
  copy:
    src: "candlepin-redhat-ca.crt"
    dest: "/etc/tower/candlepin-redhat-ca.crt"
    mode: 0640
    owner: root
    group: awx
  become: True

